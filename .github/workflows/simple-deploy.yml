name: Simple Infrastructure Deploy

on:
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy'
        required: true
        default: 'dev'
        type: choice
        options:
        - dev
        - prod

env:
  TF_VERSION: '1.6.0'
  AWS_DEFAULT_REGION: ${{ secrets.AWS_DEFAULT_REGION }}

jobs:
  deploy:
    name: Deploy Infrastructure
    runs-on: ubuntu-latest
    environment: ${{ github.event.inputs.environment == 'prod' && 'production' || 'development' }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-session-token: ${{ secrets.AWS_SESSION_TOKEN }}
        aws-region: ${{ secrets.AWS_DEFAULT_REGION }}

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: ${{ env.TF_VERSION }}

    - name: Terraform Init
      run: |
        cd terraform/environments/${{ github.event.inputs.environment }}
        terraform init \
          -backend-config="bucket=${{ secrets.TF_STATE_BUCKET }}" \
          -backend-config="key=${{ github.event.inputs.environment }}/terraform.tfstate" \
          -backend-config="region=${{ secrets.AWS_DEFAULT_REGION }}" \
          -backend-config="dynamodb_table=${{ secrets.TF_STATE_DYNAMODB_TABLE }}"

    - name: Terraform Validate
      run: |
        cd terraform/environments/${{ github.event.inputs.environment }}
        terraform validate

    - name: Terraform Plan
      run: |
        cd terraform/environments/${{ github.event.inputs.environment }}
        terraform plan -var-file="terraform.tfvars" -out=tfplan

    - name: Terraform Apply
      run: |
        cd terraform/environments/${{ github.event.inputs.environment }}
        terraform apply -auto-approve tfplan

    - name: Get Outputs
      id: outputs
      run: |
        cd terraform/environments/${{ github.event.inputs.environment }}
        echo "ALB_DNS=$(terraform output -raw application_url 2>/dev/null || echo 'Not available')" >> $GITHUB_OUTPUT
        echo "STATIC_WEBSITE_URL=$(terraform output -raw static_website_url 2>/dev/null || echo 'Not available')" >> $GITHUB_OUTPUT

    - name: Deployment Summary
      run: |
        cat >> $GITHUB_STEP_SUMMARY << EOF
        # ðŸš€ Infrastructure Deployment Complete
        
        ## Environment: ${{ github.event.inputs.environment }}
        
        ## Deployed Resources
        - âœ… VPC and networking infrastructure
        - âœ… Aurora MySQL database cluster
        - âœ… Auto Scaling Groups (Web & App tiers)
        - âœ… Application Load Balancer
        - âœ… S3 buckets for storage
        - âœ… CloudWatch monitoring
        
        ## Access URLs
        - **Application**: ${{ steps.outputs.outputs.ALB_DNS }}
        - **Static Website**: ${{ steps.outputs.outputs.STATIC_WEBSITE_URL }}
        
        ## Next Steps
        - Test application functionality
        - Review CloudWatch dashboards
        - Monitor resource utilization
        
        *Deployment completed at $(date)*
        EOF