name: Test AWS Access

on:
  workflow_dispatch:
  push:
    branches: [ master, main ]
    paths:
      - '.github/workflows/test-aws-access.yml'

jobs:
  test-aws-credentials:
    name: Test AWS Credentials
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Validate required secrets
        run: |
          echo "Checking required secrets..."
          if [ -z "${{ secrets.AWS_ACCESS_KEY_ID }}" ]; then
            echo "❌ AWS_ACCESS_KEY_ID secret is missing"
            exit 1
          fi
          if [ -z "${{ secrets.AWS_SECRET_ACCESS_KEY }}" ]; then
            echo "❌ AWS_SECRET_ACCESS_KEY secret is missing"
            exit 1
          fi
          if [ -z "${{ secrets.AWS_DEFAULT_REGION }}" ]; then
            echo "❌ AWS_DEFAULT_REGION secret is missing - add 'us-west-2'"
            exit 1
          fi
          echo "✅ All required secrets are present"

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-session-token: ${{ secrets.AWS_SESSION_TOKEN }}
          aws-region: ${{ secrets.AWS_DEFAULT_REGION }}

      - name: Test AWS CLI access
        run: |
          echo "Testing AWS CLI access..."
          aws sts get-caller-identity
          echo "✅ AWS credentials are working!"

      - name: Test S3 access
        run: |
          echo "Testing S3 access..."
          aws s3 ls || echo "⚠️ No S3 buckets found or access denied"

      - name: Test EC2 access
        run: |
          echo "Testing EC2 access..."
          aws ec2 describe-regions --region ${{ secrets.AWS_DEFAULT_REGION }} || echo "⚠️ EC2 access denied"

      - name: Test IAM access
        run: |
          echo "Testing IAM access..."
          aws iam get-user || echo "⚠️ IAM access limited"

  test-terraform-backend:
    name: Test Terraform Backend Access
    runs-on: ubuntu-latest
    needs: test-aws-credentials
    if: success()
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Validate backend secrets
        run: |
          echo "Checking backend secrets..."
          if [ -z "${{ secrets.TF_STATE_BUCKET }}" ]; then
            echo "❌ TF_STATE_BUCKET secret is missing - add 'terraform-state-kashedin-422bf0c7'"
            exit 1
          fi
          if [ -z "${{ secrets.TF_STATE_DYNAMODB_TABLE }}" ]; then
            echo "❌ TF_STATE_DYNAMODB_TABLE secret is missing - add 'terraform-state-lock-kashedin'"
            exit 1
          fi
          echo "✅ All backend secrets are present"

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-session-token: ${{ secrets.AWS_SESSION_TOKEN }}
          aws-region: ${{ secrets.AWS_DEFAULT_REGION }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.5.0

      - name: Test S3 backend access
        run: |
          if [ -n "${{ secrets.TF_STATE_BUCKET }}" ]; then
            echo "Testing S3 backend bucket access..."
            aws s3 ls s3://${{ secrets.TF_STATE_BUCKET }} || echo "⚠️ Backend bucket not found - run backend setup first"
          else
            echo "⚠️ TF_STATE_BUCKET secret not configured"
          fi

      - name: Test DynamoDB backend access
        run: |
          if [ -n "${{ secrets.TF_STATE_DYNAMODB_TABLE }}" ]; then
            echo "Testing DynamoDB backend table access..."
            aws dynamodb describe-table --table-name ${{ secrets.TF_STATE_DYNAMODB_TABLE }} || echo "⚠️ Backend table not found - run backend setup first"
          else
            echo "⚠️ TF_STATE_DYNAMODB_TABLE secret not configured"
          fi

      - name: Test Terraform initialization
        run: |
          cd terraform/backend-setup
          terraform init
          terraform validate
          echo "✅ Terraform backend configuration is valid!"